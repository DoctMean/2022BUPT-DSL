{"ast":null,"code":"var _jsxFileName = \"F:\\\\\\u5927\\u5B66\\u6587\\u6863\\\\\\u7A0B\\u5E8F\\u8BBE\\u8BA1\\u5B9E\\u8DF5\\\\DSL\\\\DSL-RobotChat\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useEffect } from \"react\";\nimport Chat, { Bubble, useMessages } from \"@chatui/core\";\nimport \"@chatui/core/dist/index.css\";\nimport axios from \"axios\";\n\n// 配置常量\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:8000/chat\"; // 后端API地址\n\nexport default function App() {\n  _s();\n  const {\n    messages,\n    appendMsg,\n    setTyping\n  } = useMessages([]);\n\n  // 发送消息\n  async function handleSend(type, val) {\n    if (type === \"text\" && val.trim()) {\n      // 用户消息\n      appendMsg({\n        type: \"text\",\n        content: {\n          text: val\n        },\n        position: \"right\"\n      });\n      try {\n        const response = await axios.post(API_URL, {\n          text: val\n        });\n        const reply = response.data.reply;\n\n        // 机器人回复\n        appendMsg({\n          type: \"text\",\n          content: {\n            text: reply\n          }\n        });\n      } catch (error) {\n        console.error(\"Error:\", error);\n        appendMsg({\n          type: \"text\",\n          content: {\n            text: \"\\\"光在睡觉，不要打扰她比较好...\\\"\"\n          }\n        });\n      }\n    }\n  }\n\n  // 渲染消息内容\n  function renderMessageContent(msg) {\n    return /*#__PURE__*/_jsxDEV(Bubble, {\n      content: msg.content.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this);\n  }\n\n  // 清理副作用，避免在组件卸载时发送消息\n  useEffect(() => {\n    return () => {\n      setTyping(false);\n    };\n  }, [setTyping]);\n  return /*#__PURE__*/_jsxDEV(Chat, {\n    navbar: {\n      title: \"Arcaea Ambassador\"\n    },\n    messages: messages,\n    renderMessageContent: renderMessageContent,\n    onSend: handleSend\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"80s6VKhx4Kor8EVcPcOnZoJw3r8=\", false, function () {\n  return [useMessages];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","Chat","Bubble","useMessages","axios","jsxDEV","_jsxDEV","API_URL","App","_s","messages","appendMsg","setTyping","handleSend","type","val","trim","content","text","position","response","post","reply","data","error","console","renderMessageContent","msg","fileName","_jsxFileName","lineNumber","columnNumber","navbar","title","onSend","_c","$RefreshReg$"],"sources":["F:/大学文档/程序设计实践/DSL/DSL-RobotChat/frontend/src/App.js"],"sourcesContent":["// App.js\r\nimport React, { useEffect } from \"react\";\r\nimport Chat, { Bubble, useMessages } from \"@chatui/core\";\r\nimport \"@chatui/core/dist/index.css\";\r\nimport axios from \"axios\";\r\n\r\n// 配置常量\r\nconst API_URL = \"http://localhost:8000/chat\"; // 后端API地址\r\n\r\nexport default function App() {\r\n  const { messages, appendMsg, setTyping } = useMessages([]);\r\n\r\n  // 发送消息\r\n  async function handleSend(type, val) {\r\n    if (type === \"text\" && val.trim()) {\r\n      // 用户消息\r\n      appendMsg({\r\n        type: \"text\",\r\n        content: { text: val },\r\n        position: \"right\"\r\n      });\r\n\r\n      try {\r\n        const response = await axios.post(API_URL, { text: val });\r\n        const reply = response.data.reply;\r\n\r\n        // 机器人回复\r\n        appendMsg({\r\n          type: \"text\",\r\n          content: { text: reply }\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Error:\", error);\r\n        appendMsg({\r\n          type: \"text\",\r\n          content: { text: \"\\\"光在睡觉，不要打扰她比较好...\\\"\" }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // 渲染消息内容\r\n  function renderMessageContent(msg) {\r\n    return <Bubble content={msg.content.text} />;\r\n  }\r\n\r\n  // 清理副作用，避免在组件卸载时发送消息\r\n  useEffect(() => {\r\n    return () => {\r\n      setTyping(false);\r\n    };\r\n  }, [setTyping]);\r\n\r\n  return (\r\n    <Chat\r\n      navbar={{ title: \"Arcaea Ambassador\" }}\r\n      messages={messages}\r\n      renderMessageContent={renderMessageContent}\r\n      onSend={handleSend}\r\n    />\r\n  );\r\n}\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,IAAI,IAAIC,MAAM,EAAEC,WAAW,QAAQ,cAAc;AACxD,OAAO,6BAA6B;AACpC,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,OAAO,GAAG,4BAA4B,CAAC,CAAC;;AAE9C,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM;IAAEC,QAAQ;IAAEC,SAAS;IAAEC;EAAU,CAAC,GAAGT,WAAW,CAAC,EAAE,CAAC;;EAE1D;EACA,eAAeU,UAAUA,CAACC,IAAI,EAAEC,GAAG,EAAE;IACnC,IAAID,IAAI,KAAK,MAAM,IAAIC,GAAG,CAACC,IAAI,CAAC,CAAC,EAAE;MACjC;MACAL,SAAS,CAAC;QACRG,IAAI,EAAE,MAAM;QACZG,OAAO,EAAE;UAAEC,IAAI,EAAEH;QAAI,CAAC;QACtBI,QAAQ,EAAE;MACZ,CAAC,CAAC;MAEF,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAACd,OAAO,EAAE;UAAEW,IAAI,EAAEH;QAAI,CAAC,CAAC;QACzD,MAAMO,KAAK,GAAGF,QAAQ,CAACG,IAAI,CAACD,KAAK;;QAEjC;QACAX,SAAS,CAAC;UACRG,IAAI,EAAE,MAAM;UACZG,OAAO,EAAE;YAAEC,IAAI,EAAEI;UAAM;QACzB,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;QAC9Bb,SAAS,CAAC;UACRG,IAAI,EAAE,MAAM;UACZG,OAAO,EAAE;YAAEC,IAAI,EAAE;UAAuB;QAC1C,CAAC,CAAC;MACJ;IACF;EACF;;EAEA;EACA,SAASQ,oBAAoBA,CAACC,GAAG,EAAE;IACjC,oBAAOrB,OAAA,CAACJ,MAAM;MAACe,OAAO,EAAEU,GAAG,CAACV,OAAO,CAACC;IAAK;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC9C;;EAEA;EACA/B,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACXY,SAAS,CAAC,KAAK,CAAC;IAClB,CAAC;EACH,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;EAEf,oBACEN,OAAA,CAACL,IAAI;IACH+B,MAAM,EAAE;MAAEC,KAAK,EAAE;IAAoB,CAAE;IACvCvB,QAAQ,EAAEA,QAAS;IACnBgB,oBAAoB,EAAEA,oBAAqB;IAC3CQ,MAAM,EAAErB;EAAW;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEN;AAACtB,EAAA,CApDuBD,GAAG;EAAA,QACkBL,WAAW;AAAA;AAAAgC,EAAA,GADhC3B,GAAG;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}