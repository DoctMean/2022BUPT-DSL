{"ast":null,"code":"var _jsxFileName = \"F:\\\\\\u5927\\u5B66\\u6587\\u6863\\\\\\u7A0B\\u5E8F\\u8BBE\\u8BA1\\u5B9E\\u8DF5\\\\DSL\\\\DSL-RobotChat\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React from \"react\";\nimport Chat, { Bubble, useMessages } from \"@chatui/core\";\nimport \"@chatui/core/dist/index.css\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const {\n    messages,\n    appendMsg,\n    setTyping\n  } = useMessages([]);\n  async function handleSend(type, val) {\n    if (type === \"text\" && val.trim()) {\n      // 用户消息\n      appendMsg({\n        type: \"text\",\n        content: {\n          text: val\n        },\n        position: \"right\"\n      });\n      setTyping(true); // 显示打字中\n\n      try {\n        const response = await axios.post(\"http://localhost:8000/chat\", {\n          //后端默认端口\n          text: val\n        });\n        const reply = response.data.reply;\n\n        // 机器人回复\n        appendMsg({\n          type: \"text\",\n          content: {\n            text: reply\n          }\n        });\n      } catch (error) {\n        console.error(\"Error:\", error);\n        appendMsg({\n          type: \"text\",\n          content: {\n            text: \"无法连接后端，请检查服务是否运行。\"\n          }\n        });\n      } finally {\n        setTyping(false); // 隐藏打字中\n      }\n    }\n  }\n  function renderMessageContent(msg) {\n    const {\n      content\n    } = msg;\n    return /*#__PURE__*/_jsxDEV(Bubble, {\n      content: content.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Chat, {\n    navbar: {\n      title: \"智能客服助手\"\n    },\n    messages: messages,\n    renderMessageContent: renderMessageContent,\n    onSend: handleSend\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"QcNvU78uK7mBLeMFe/kRjssc5Qo=\", false, function () {\n  return [useMessages];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Chat","Bubble","useMessages","axios","jsxDEV","_jsxDEV","App","_s","messages","appendMsg","setTyping","handleSend","type","val","trim","content","text","position","response","post","reply","data","error","console","renderMessageContent","msg","fileName","_jsxFileName","lineNumber","columnNumber","navbar","title","onSend","_c","$RefreshReg$"],"sources":["F:/大学文档/程序设计实践/DSL/DSL-RobotChat/frontend/src/App.js"],"sourcesContent":["// App.js\r\nimport React from \"react\";\r\nimport Chat, { Bubble, useMessages } from \"@chatui/core\";\r\nimport \"@chatui/core/dist/index.css\";\r\nimport axios from \"axios\";\r\n\r\nexport default function App() {\r\n  const { messages, appendMsg, setTyping } = useMessages([]);\r\n\r\n  async function handleSend(type, val) {\r\n    if (type === \"text\" && val.trim()) {\r\n      // 用户消息\r\n      appendMsg({\r\n        type: \"text\",\r\n        content: { text: val },\r\n        position: \"right\"\r\n      });\r\n\r\n      setTyping(true); // 显示打字中\r\n\r\n      try {\r\n        const response = await axios.post(\"http://localhost:8000/chat\", { //后端默认端口\r\n          text: val\r\n        });\r\n        \r\n        const reply = response.data.reply;\r\n\r\n        // 机器人回复\r\n        appendMsg({\r\n          type: \"text\",\r\n          content: { text: reply }\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Error:\", error);\r\n        appendMsg({\r\n          type: \"text\",\r\n          content: { text: \"无法连接后端，请检查服务是否运行。\" }\r\n        });\r\n      } finally {\r\n        setTyping(false); // 隐藏打字中\r\n      }\r\n    }\r\n  }\r\n\r\n  function renderMessageContent(msg) {\r\n    const { content } = msg;\r\n    return <Bubble content={content.text} />;\r\n  }\r\n\r\n  return (\r\n    <Chat\r\n      navbar={{ title: \"智能客服助手\" }}\r\n      messages={messages}\r\n      renderMessageContent={renderMessageContent}\r\n      onSend={handleSend}\r\n    />\r\n  );\r\n}\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,IAAIC,MAAM,EAAEC,WAAW,QAAQ,cAAc;AACxD,OAAO,6BAA6B;AACpC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM;IAAEC,QAAQ;IAAEC,SAAS;IAAEC;EAAU,CAAC,GAAGR,WAAW,CAAC,EAAE,CAAC;EAE1D,eAAeS,UAAUA,CAACC,IAAI,EAAEC,GAAG,EAAE;IACnC,IAAID,IAAI,KAAK,MAAM,IAAIC,GAAG,CAACC,IAAI,CAAC,CAAC,EAAE;MACjC;MACAL,SAAS,CAAC;QACRG,IAAI,EAAE,MAAM;QACZG,OAAO,EAAE;UAAEC,IAAI,EAAEH;QAAI,CAAC;QACtBI,QAAQ,EAAE;MACZ,CAAC,CAAC;MAEFP,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;;MAEjB,IAAI;QACF,MAAMQ,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAAC,4BAA4B,EAAE;UAAE;UAChEH,IAAI,EAAEH;QACR,CAAC,CAAC;QAEF,MAAMO,KAAK,GAAGF,QAAQ,CAACG,IAAI,CAACD,KAAK;;QAEjC;QACAX,SAAS,CAAC;UACRG,IAAI,EAAE,MAAM;UACZG,OAAO,EAAE;YAAEC,IAAI,EAAEI;UAAM;QACzB,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;QAC9Bb,SAAS,CAAC;UACRG,IAAI,EAAE,MAAM;UACZG,OAAO,EAAE;YAAEC,IAAI,EAAE;UAAoB;QACvC,CAAC,CAAC;MACJ,CAAC,SAAS;QACRN,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;MACpB;IACF;EACF;EAEA,SAASc,oBAAoBA,CAACC,GAAG,EAAE;IACjC,MAAM;MAAEV;IAAQ,CAAC,GAAGU,GAAG;IACvB,oBAAOpB,OAAA,CAACJ,MAAM;MAACc,OAAO,EAAEA,OAAO,CAACC;IAAK;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC1C;EAEA,oBACExB,OAAA,CAACL,IAAI;IACH8B,MAAM,EAAE;MAAEC,KAAK,EAAE;IAAS,CAAE;IAC5BvB,QAAQ,EAAEA,QAAS;IACnBgB,oBAAoB,EAAEA,oBAAqB;IAC3CQ,MAAM,EAAErB;EAAW;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEN;AAACtB,EAAA,CAnDuBD,GAAG;EAAA,QACkBJ,WAAW;AAAA;AAAA+B,EAAA,GADhC3B,GAAG;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}