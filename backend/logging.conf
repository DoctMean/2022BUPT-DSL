# [loggers]
# 定义日志记录器
# - root：根记录器
# - exampleLogger：自定义记录器
[loggers]
keys=root,exampleLogger

# [handlers]
# 定义处理器，指定如何输出日志
# - consoleHandler：输出到控制台
# - fileHandler：输出到文件
[handlers]
keys=consoleHandler,fileHandler

# [formatters]
# 定义日志输出格式
# - simpleFormatter：简化的日志格式
[formatters]
keys=simpleFormatter

# [logger_root]
# 配置根日志记录器
# - level：日志级别为 INFO，表示记录 INFO 及以上级别的日志
# - handlers：指定使用的处理器，这里使用控制台处理器
[logger_root]
level=INFO
handlers=consoleHandler

# [logger_exampleLogger]
# 配置名为 exampleLogger 的自定义日志记录器
# - level：日志级别为 DEBUG，表示记录 DEBUG 及以上级别的日志
# - handlers：指定使用的处理器，这里使用控制台和文件处理器
# - qualname：限定记录器名称为 exampleLogger
# - propagate：设置为 0 表示不将日志消息传递给父记录器
[logger_exampleLogger]
level=DEBUG
handlers=consoleHandler,fileHandler
qualname=exampleLogger
propagate=0

# [handler_consoleHandler]
# 配置控制台日志处理器
# - class：使用 StreamHandler 类，将日志输出到标准输出（控制台）
# - level：日志级别为 DEBUG，记录 DEBUG 及以上级别的日志
# - formatter：使用 simpleFormatter 格式化日志
# - args：设置输出流为 sys.stdout（控制台）
[handler_consoleHandler]
class=StreamHandler
level=DEBUG
formatter=simpleFormatter
args=(sys.stdout,)

# [handler_fileHandler]
# 配置文件日志处理器
# - class：使用 FileHandler 类，将日志输出到文件
# - level：日志级别为 INFO，记录 INFO 及以上级别的日志
# - formatter：使用 simpleFormatter 格式化日志
# - args：设置日志文件路径为 'info.log'，最大文件大小为 10MB，最多保留 5 个文件，以追加模式打开
[handler_fileHandler]
class=logging.handlers.RotatingFileHandler
level=INFO
formatter=simpleFormatter
args=('info.log', 'a', 10240, 5, 'utf-8')

# [formatter_simpleFormatter]
# 配置日志输出格式
# - format：设置日志的格式，包含时间、记录器名称、日志级别和消息
# - datefmt：设置时间的格式
[formatter_simpleFormatter]
format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
datefmt=%Y-%m-%d %H:%M:%S
